1.  Wat houdt de vulnerability in?
- (A1) Injection : vaak over SQL injection; wanneer de query rechtstreeks is in te vullen door de eindgebruiker van het systeem.
- (A2) Broken Authentication : De authenticatie is kapot, alles wat je extra kunt doen met authenticatie extra kunt doen lekt dan
- (A6) Security Misconfiguration : Veel onjuiste configuratie van apparaten en programma's
2.  Hoe groot is het risico voor deze kwetsbaarheid binnen het project?
    - (A1) Doordat er gebruik is gemaakt van Hibernate is de kwetsbaarheid hiervoor nihil
    - (A2) Momenteel wordt er geen gebruik gemaakt van inlog, met inlog zou dit alleen maar kunnen toenemen
    - (A3) Niet groot, er wordt zoveel mogelijk op nieuwe versies gewerkt.
    a.  Wat als we authenticatie en autorisatie toevoegen?
        - (A1) dan zal deze nog kleiner worden, aangezien de applicatie dan voor minder mensen toegankelijk wordt
        - (A2) zal alleen maar groter kunnen worden, maar dit kun je beter inperken door het gebruik van sterke wachtwoorden
        - (A6) Wanneer er een inlog voor wordt gezet; is er toch sprake van een extra muur om alles te beschermen
3.  Hoe wordt dit risico tegengegaan binnen het project?
    - (A1) door het gebruik van hibernate, en verder wordt er door de gebruiker niet iets direct doorgestuurd naar de database
    - (A2) dit wordt momenteel niet tegengegaan, omdat er geen inlog is.
    - (A6) door versies van software en libraries die de applicatie gebruikt regelmatig te updaten. Momenteel draait alles op de nieuwste veilige versie
    a.  Als je denkt dat (een onderdeel van) een library of framework dit voor je oplost, probeer dan uit te zoeken welk onderdeel dit is en hoe deze dat tegengaat.
    - (A1) door in hibernate parameters te binden, je kunt dit configureren